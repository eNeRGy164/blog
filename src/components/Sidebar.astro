---
import { urlifyToken, sortedPosts, getTagsWithPosts } from "@/js/util.js";

const unsortedPosts = await Astro.glob("../posts/*.md");
const posts: { frontmatter: { permalink: string; title: string } }[] = sortedPosts(unsortedPosts);

function generateTagCloud() {
  const tagsMap = getTagsWithPosts(unsortedPosts);

  // Convert tagsMap to an array of [tag, tagPosts] pairs and sort by usage (most to least)
  const tagArray = Array.from(tagsMap.entries())
    .sort(([, postsA], [, postsB]) => postsB.length - postsA.length)
    .slice(0, 50);

  // Find min and max tag counts
  const counts = tagArray.map(([, tagPosts]) => tagPosts.length);
  const minCount = Math.min(...counts);
  const maxCount = Math.max(...counts);

  // Function to calculate font size between 8 and 22
  const calculateFontSize = (count: number) => {
    const minFontSize = 8;
    const maxFontSize = 22;

    if (maxCount === minCount) {
      return minFontSize; // If all tags have the same count, use the smallest font size
    }

    // Linear interpolation to map the count to a font size between 8 and 22
    return minFontSize + ((count - minCount) / (maxCount - minCount)) * (maxFontSize - minFontSize);
  };

  // Sort alphabetically after slicing, then return the tag cloud with font sizes
  return tagArray
    .sort(([tagA], [tagB]) => tagA.localeCompare(tagB)) // Sort alphabetically
    .map(([tag, tagPosts]) => ({
      tag,
      count: tagPosts.length,
      fontSize: calculateFontSize(tagPosts.length), // Calculate font size based on count
    }));
}

const tags = generateTagCloud();
---

<section itemprop="hasPart" id="sidebar" itemscope itemtype="http://schema.org/WPSideBar">
  <aside id="sidebar-image">
    <a href="/about">
      <img src="/michael-hompus-blog.png" width="263" height="245" alt="MichaÃ«l Hompus" loading="eager" decoding="async" data-image-component="true" />
    </a>
  </aside>

  <aside id="tag-cloud">
    <h2>Tags</h2>
    <div>
      {
        tags.map((tagItem) => (
          <>
            <a
              href={`/tag/${urlifyToken(tagItem.tag)}`}
              title={`${tagItem.count} posts tagged with "${tagItem.tag}"`}
              rel="tag"
              style={`font-size: ${tagItem.fontSize}pt;`}>
              {tagItem.tag}
            </a>
          </>
        ))
      }
    </div>
  </aside>

  <aside id="recent-posts">
    <h2>Recent Posts</h2>
    <div>
      <nav>
        <ol>
          {
            posts.slice(0, 5).map((post) => (
              <li>
                <h3>
                  <a href={post.frontmatter.permalink} target="_self">
                    {post.frontmatter.title}
                  </a>
                </h3>
              </li>
            ))
          }
        </ol>
      </nav>
    </div>
  </aside>
</section>
