---
import MonthArchive from '@/layouts/MonthArchive.astro';
import YearArchive from '@/layouts/YearArchive.astro';
import DayArchive from '@/layouts/DayArchive.astro';
import { sortedPosts } from '@/js/util.js'

export interface Frontmatter { date: string; permalink: string; title: string; excerpt: string; updated?: string | null; }
export interface Post { frontmatter: Frontmatter; }
export interface Params { wp: string; }
export interface Posts { params: Params; props: Post; }
export interface Page { params: Params; props: Post; }
export interface Props { Content? : any; posts: Post[]; year: string; month?: string | null; day?: string | null; }
export interface Archive { params: Params; props: Props; }

export async function getStaticPaths(): Promise<(Page | Archive)[]> {
  const postFiles: Post[] = sortedPosts(await Astro.glob('../posts/*.{md,mdx}'));

  const yearSet = new Set<string>();
  const monthSet = new Set<{ year: string; month: string }>();
  const daySet = new Set<{ year: string; month: string; day: string }>();

  const posts: (Page | Archive)[] = postFiles.map(post => {
    const permalink = post.frontmatter.permalink.slice(1).slice(0, -1);
    const [year, month, day] = permalink.split('/').slice(0, 3);

    yearSet.add(year);
    monthSet.add({ year, month });
    daySet.add({ year, month, day });

    return {
      params: { wp: permalink },
      props: post
    };
  });

  const createArchive = (wp: string, filterFn: (post: Post) => boolean, props: {year: string, month?: string, day?: string}): Archive => ({
    params: { wp },
    props: {
      posts: postFiles.filter(filterFn),
      ...props
    }
  });

  // Create archives by day, month, and year
  daySet.forEach(({ year, month, day }) =>
    posts.push(createArchive(`${year}/${month}/${day}`, post => post.frontmatter.permalink.startsWith(`/${year}/${month}/${day}`), { year, month, day }))
  );

  monthSet.forEach(({ year, month }) =>
    posts.push(createArchive(`${year}/${month}`, post => post.frontmatter.permalink.startsWith(`/${year}/${month}`), { year, month }))
  );

  yearSet.forEach(year =>
    posts.push(createArchive(year, post => post.frontmatter.permalink.startsWith(`/${year}`), { year }))
  );

  return posts;
}

const { Content, posts, year, month, day } = Astro.props
---

{Content && <Content />}

{posts && year && !month && !day && <YearArchive posts={posts} year={year} />}
{posts && year && month && !day && <MonthArchive posts={posts} year={year} month={month} />}
{posts && year && month && day && <DayArchive posts={posts} year={year} month={month} day={day} />}
