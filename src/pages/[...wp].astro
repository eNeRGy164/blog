---
import MonthArchive from '@/layouts/MonthArchive.astro';
import YearArchive from '@/layouts/YearArchive.astro';
import DayArchive from '@/layouts/DayArchive.astro';
import BlogPost from '@/layouts/BlogPost.astro';
import { getCollection } from 'astro:content';
import { sortedPosts } from '@/js/util.js'

import type { CollectionEntry } from 'astro:content';

export interface Params { wp: string; }
export interface Posts { params: Params; props: CollectionEntry<'posts'>; }
export interface Page { params: Params; props: CollectionEntry<'posts'>; }
export interface Archive { params: Params; props: { posts?: CollectionEntry<'posts'>[]; year: string; month?: string | null; day?: string | null; }; }

export async function getStaticPaths(): Promise<(Page | Archive)[]> {
  const postFiles: CollectionEntry<'posts'>[] = sortedPosts(await getCollection('posts'));

  const yearSet = new Set<string>();
  const monthMap = new Map<string, { year: string; month: string }>();
  const dayMap = new Map<string, { year: string; month: string; day: string }>();

  const posts: (Page | Archive)[] = postFiles.map(post => {
    const permalink = post.data.permalink.slice(1).slice(0, -1);
    const [year, month, day] = permalink.split('/').slice(0, 3);

    yearSet.add(year);

    const monthKey = `${year}-${month}`;
    if (!monthMap.has(monthKey)) {
      monthMap.set(monthKey, { year, month });
    }
    
    const dayKey = `${year}-${month}-${day}`;
    if (!dayMap.has(dayKey)) {
      dayMap.set(dayKey, { year, month, day });
    }

    return {
      params: { wp: permalink },
      props: post
    };
  });

  const createArchive = (wp: string, filterFn: (post: CollectionEntry<'posts'>) => boolean, props: {year: string, month?: string, day?: string}): Archive => ({
    params: { wp },
    props: {
      posts: postFiles.filter(filterFn),
      ...props
    }
  });

  // Create archives by day, month, and year
  dayMap.forEach(({ year, month, day }) =>
    posts.push(createArchive(`${year}/${month}/${day}`, post => post.data.permalink.startsWith(`/${year}/${month}/${day}`), { year, month, day }))
  );

  monthMap.forEach(({ year, month }) =>
    posts.push(createArchive(`${year}/${month}`, post => post.data.permalink.startsWith(`/${year}/${month}`), { year, month }))
  );

  yearSet.forEach(year =>
    posts.push(createArchive(year, post => post.data.permalink.startsWith(`/${year}`), { year }))
  );

  return posts;
}

let post;
const { posts, year, month, day } = Astro.props

if (posts == null) {
  post = Astro.props as CollectionEntry<'posts'>;
}
---

{post && <BlogPost {post} />}

{posts && year && !month && !day && <YearArchive posts={posts} year={year} />}
{posts && year && month && !day && <MonthArchive posts={posts} year={year} month={month} />}
{posts && year && month && day && <DayArchive posts={posts} year={year} month={month} day={day} />}
